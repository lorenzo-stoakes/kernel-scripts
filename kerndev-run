#!/bin/bash
set -e; set -o pipefail; source kerndev-shared.sh

# Networking scripts adapted from
# https://github.com/lahwaacz/archlinux-dotfiles/blob/master/Scripts/qemu-launcher.sh

# If argument provided it specifies a cross-compile target architecture.
target_arch=${1:-$(uname -m)}

tap_limit=10
br_nic="qemu-br0"
mac="de:ad:be:ef:f0:0f"

# Functions.

function get_tap_name() {
	for (( i=0; i < $tap_limit; i++ )); do
		local name="tap$i"
		if [[ ! -d "/sys/class/net/$name" ]]; then
			echo "$name"
			break
		fi
	done
}

function determine_wan_nic()
{
	# Adapted from http://unix.stackexchange.com/a/302613 with love.
	ip route ls | grep default | grep -Po '(?<=(dev ))[^ ]+' || true
}

check_exists brctl dnsmasq

tap_nic=$(get_tap_name)

elevate $@

# We want access to the underlying user.
[[ -z "$SUDO_USER" ]] && fatal Please run this using sudo!

# Default to assuming the target_arch is an actual qemu arch.
qemu=qemu-system-${target_arch}

case $target_arch in
arm)
	# Use aarch64 + backwards compatibility.
	qemu=qemu-system-aarch64
	rootfs_image_path=$KERNDEV_PATH/rootfs_arm.img
	;&
aarch64)
	kernel_image_path=$LINUX_DEV_PATH/arch/arm64/boot/Image

	rootfs_image_path=${rootfs_image_path:-$KERNDEV_PATH/rootfs_aarch64.img}

	if [[ "${target_arch}" == "$(uname -m)" ]]; then
		rootfs_image_path=$KERNDEV_PATH/rootfs.img

		arch_opts="
			-machine virt
			-enable-kvm
			-cpu host
			-drive if=none,file=$rootfs_image_path,id=vda,format=raw
			-device virtio-blk-device,drive=vda"
	else
		echo $target_arch
		arch_opts="-machine virt
			 -cpu cortex-a57
			 -machine type=virt,kernel_irqchip=on
			 -drive if=none,file=$rootfs_image_path,id=vda,format=raw
			 -device virtio-blk-device,drive=vda"
	fi

	arch_append="console=ttyAMA0"
	arch_net_opts="-net nic,model=virtio,macaddr=$mac
		 -netdev tap,ifname=$tap_nic,script=no,downscript=no,id=tap
		 -device virtio-net-device,netdev=tap"

	;;
x86_64|icelake)
	kernel_image_path=$LINUX_DEV_PATH/arch/x86/boot/bzImage
	rootfs_image_path=$KERNDEV_PATH/rootfs.img

	if [[ "$target_arch" == "icelake" ]] || ! lsmod | grep kvm > /dev/null; then
		qemu=qemu-system-x86_64
		arch_opts="-cpu Icelake-Server
		-drive file=$rootfs_image_path,if=virtio,cache=none,format=raw
		-boot once=c"
	else
		arch_opts="-enable-kvm
		-cpu host
		-drive file=$rootfs_image_path,if=virtio,cache=none,format=raw
		-boot once=c"
	fi

	arch_append="console=ttyS0"
	arch_net_opts="-net nic,model=virtio,macaddr=$mac
	 -net tap,ifname=$tap_nic,script=no,downscript=no"

	;;
*)
	fatal "unknown architecture: $target_arch"
	;;
esac

# '-echr 0x02' moves escape key to C-b to avoid C-a getting nerfed.
shared_opts="-nographic -s -echr 0x02"
# Can add the latter in case heavier log output is required -> console.
shared_append="root=/dev/vda rw earlyprintk=ttyS0 nokaslr no_hash_pointers loglevel=2" #loglevel=7 systemd.journald.forward_to_console=1"

numa_opts="-smp ${QEMU_CORES} -m ${QEMU_RAM} "
if [[ -n "$USE_NUMA" ]]; then
	# Really an experimental and crazy NUMA architecture.
	numa_opts+="-object memory-backend-ram,size=15M,id=m0 "
	numa_opts+="-numa node,memdev=m0,cpus=1 "
	numa_opts+="-object memory-backend-ram,size=3G,id=m1 "
	numa_opts+="-numa node,memdev=m1,cpus=2-3 "
	numa_opts+="-object memory-backend-ram,size=5105M,id=m2 "
	numa_opts+="-numa node,memdev=m2,cpus=4-7"
fi

wan_nic=$(determine_wan_nic)
if [[ -n "$wan_nic" ]]; then
	kerndev-qemu-tap-helper.sh $SUDO_USER $tap_nic $br_nic $wan_nic up
	trap "kerndev-qemu-tap-helper.sh $SUDO_USER $tap_nic $br_nic $wan_nic down" EXIT
else
	echo "WARN: Couldn't determine NIC, networking will not work." >&2
	unset arch_net_opts
fi

$qemu $shared_opts $numa_opts $arch_opts $arch_net_opts $QEMU_CUSTOM_SETTINGS \
	-kernel $kernel_image_path -append "$shared_append $arch_append"
